Set<String> rangeIpList = this.traceOrgCommonUtil.getUpdateIPRange(startIp, endIp);

String ipList = this.traceOrgCommonUtil.getIpList(rangeIpList);


Query : TraceOrgSubnetDetails traceOrgSubnetDetail = (TraceOrgSubnetDetails)this.traceOrgService.getById(TraceOrgCommonConstants.TRACE_ORG_SUBNET_DETAILS,Long.parseLong(subnetId));


List<TraceOrgSubnetIpDetails> traceOrgSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) this.traceOrgService.commonQuery("",TraceOrgCommonConstants.SELECTED_IP_SUBNET_ID.replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,subnetId.toString()).replace(TraceOrgCommonConstants.ID, TraceOrgCommonConstants.IP_ADDRESS).replace(TraceOrgCommonConstants.SUBNET_ID_LIST, ipList));

                                    List<Long> idList = new ArrayList<>();

                                    if(traceOrgSubnetIpDetailsList != null && !traceOrgSubnetIpDetailsList.isEmpty())
                                    {
                                        for (int index = 0; index < traceOrgSubnetIpDetailsList.size(); index++)
                                        {
                                            idList.add(traceOrgSubnetIpDetailsList.get(index).getId());
                                        }
                                    }

                                    if(!idList.isEmpty())
                                    {
                                        for(int index = 0; index < idList.size(); index++)
                                        {
                                            TraceOrgSubnetIpDetails traceOrgSubnetIpDetails = (TraceOrgSubnetIpDetails)this.traceOrgService.getById(TraceOrgCommonConstants.TRACE_ORG_SUBNET_IP_DETAILS,idList.get(index));



@RequestMapping(value = TraceOrgCommonConstants.UPDATE_SUBNET_IP_RANGE_REST_URL, method = RequestMethod.POST)
    public ResponseEntity<?> updateSubnetIpRange(HttpServletRequest request, @RequestParam String startIp, @RequestParam String endIp, @RequestParam String status, @RequestParam String subnetId)
    {
        Response response = new Response();

        if(status != null && !status.isEmpty() && startIp != null && !startIp.isEmpty() && endIp != null && !endIp.isEmpty() && subnetId !=null && (status.equalsIgnoreCase("USED") || status.equalsIgnoreCase("Available") || status.equalsIgnoreCase("Reserved") || status.equalsIgnoreCase("Transient")))
        {
            try
            {
                String accessToken = request.getHeader(TraceOrgCommonConstants.ACCESSTOKEN);

                if (traceOrgCommonUtil.checkToken(accessToken))
                {
                    if(traceOrgCommonUtil.currentUserRole(accessToken).equals(TraceOrgCommonConstants.ROLE_ADMIN))
                    {
                        TraceOrgSubnetDetails traceOrgSubnetDetail = (TraceOrgSubnetDetails)this.traceOrgService.getById(TraceOrgCommonConstants.TRACE_ORG_SUBNET_DETAILS,Long.parseLong(subnetId));

                        if(traceOrgSubnetDetail != null)
                        {
                            if(this.traceOrgCommonUtil.isValidIp(traceOrgSubnetDetail,startIp) &&  this.traceOrgCommonUtil.isValidIp(traceOrgSubnetDetail,endIp))
                            {
                                if(Long.parseLong(startIp.substring(startIp.lastIndexOf(".")+ 1,startIp.length())) < Long.parseLong(endIp.substring(endIp.lastIndexOf(".")+1,endIp.length())))
                                {
                                    Set<String> rangeIpList = this.traceOrgCommonUtil.getUpdateIPRange(startIp, endIp);

                                    String ipList = this.traceOrgCommonUtil.getIpList(rangeIpList);

                                    List<TraceOrgSubnetIpDetails> traceOrgSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) this.traceOrgService.commonQuery("",TraceOrgCommonConstants.SELECTED_IP_SUBNET_ID.replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,subnetId.toString()).replace(TraceOrgCommonConstants.ID, TraceOrgCommonConstants.IP_ADDRESS).replace(TraceOrgCommonConstants.SUBNET_ID_LIST, ipList));

                                    List<Long> idList = new ArrayList<>();

                                    if(traceOrgSubnetIpDetailsList != null && !traceOrgSubnetIpDetailsList.isEmpty())
                                    {
                                        for (int index = 0; index < traceOrgSubnetIpDetailsList.size(); index++)
                                        {
                                            idList.add(traceOrgSubnetIpDetailsList.get(index).getId());
                                        }
                                    }

                                    if(!idList.isEmpty())
                                    {
                                        for(int index = 0; index < idList.size(); index++)
                                        {
                                            TraceOrgSubnetIpDetails traceOrgSubnetIpDetails = (TraceOrgSubnetIpDetails)this.traceOrgService.getById(TraceOrgCommonConstants.TRACE_ORG_SUBNET_IP_DETAILS,idList.get(index));

                                            switch(status.toUpperCase())
                                            {
                                                case "USED" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.USED);
                                                    break;
                                                case "TRANSIENT" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.TRANSIENT);
                                                    break;
                                                case "AVAILABLE" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.AVAILABLE);
                                                    break;
                                                case "RESERVED" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.RESERVED);
                                                    break;
                                                default:
                                                    traceOrgSubnetIpDetails.setStatus(null);
                                                    break;
                                            }
                                            if(traceOrgSubnetIpDetails.getStatus() !=null)
                                            {
                                                traceOrgSubnetIpDetails.setModifiedDate(new Date());

                                                this.traceOrgService.insert(traceOrgSubnetIpDetails);
                                            }
                                        }

                                        List<TraceOrgSubnetIpDetails> totalSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.TRACE_ORG_SUBNET_IP_DETAILS +" where subnetId = '"+traceOrgSubnetDetail.getId()+"' and  deactiveStatus = false");

                                        List<TraceOrgSubnetIpDetails> availableSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.SUBNET_IP_DETAILS_BY_STATUS_AND_SUBNET_ID.replace(TraceOrgCommonConstants.STATUS_VALUE,TraceOrgCommonConstants.AVAILABLE).replace(TraceOrgCommonConstants.SUBNET_ID_VALUE, TraceOrgCommonUtil.getStringValue(traceOrgSubnetDetail.getId()))+" and deactiveStatus = false");

                                        List<TraceOrgSubnetIpDetails> usedSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.SUBNET_IP_DETAILS_BY_STATUS_AND_SUBNET_ID.replace(TraceOrgCommonConstants.STATUS_VALUE,TraceOrgCommonConstants.USED).replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,TraceOrgCommonUtil.getStringValue(traceOrgSubnetDetail.getId())) +" and deactiveStatus = false");

                                        List<TraceOrgSubnetIpDetails> transientSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.SUBNET_IP_DETAILS_BY_STATUS_AND_SUBNET_ID.replace(TraceOrgCommonConstants.STATUS_VALUE,TraceOrgCommonConstants.TRANSIENT).replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,TraceOrgCommonUtil.getStringValue(traceOrgSubnetDetail.getId())) +" and deactiveStatus = false");

                                        traceOrgSubnetDetail.setAvailableIp((long) availableSubnetIpDetailsList.size());

                                        traceOrgSubnetDetail.setUsedIp((long) usedSubnetIpDetailsList.size());

                                        traceOrgSubnetDetail.setTransientIp((long) transientSubnetIpDetailsList.size());

                                        traceOrgSubnetDetail.setTotalIp((long)totalSubnetIpDetailsList.size());

                                        traceOrgService.insert(traceOrgSubnetDetail);

                                        response.setSuccess(TraceOrgCommonConstants.TRUE);

                                        response.setMessage(TraceOrgMessageConstants.SUBNET_IP_UPDATE_SUCCESS);
                                    }
                                    else
                                    {
                                        response.setSuccess(TraceOrgCommonConstants.FALSE);

                                        response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                                    }
                                }
                                else
                                {
                                    response.setSuccess(TraceOrgCommonConstants.FALSE);

                                    response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                                }

                            }
                            else
                            {
                                response.setSuccess(TraceOrgCommonConstants.FALSE);

                                response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                            }

                        }
                        else
                        {
                            response.setSuccess(TraceOrgCommonConstants.FALSE);

                            response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                        }
                    }
                    else
                    {
                        response.setSuccess(TraceOrgCommonConstants.FALSE);

                        response.setMessage(TraceOrgMessageConstants.DO_NOT_HAVE_ACCESS);
                    }
                }
                else
                {
                    response.setSuccess(TraceOrgCommonConstants.FALSE);

                    response.setMessage(TraceOrgMessageConstants.TOKEN_NOT_RECOGNISED);
                }
            }
            catch (Exception exception)
            {
                _logger.error(exception);

                response.setSuccess(TraceOrgCommonConstants.FALSE);

                response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
            }
        }
        else
        {
            response.setSuccess(TraceOrgCommonConstants.FALSE);

            response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
        }
        return new ResponseEntity<>(response, HttpStatus.OK);
    }



@RequestMapping(value = TraceOrgCommonConstants.UPDATE_SUBNET_IP_RANGE_REST_URL, method = RequestMethod.POST)
    public ResponseEntity<?> updateSubnetIpRange(HttpServletRequest request, @RequestParam String startIp, @RequestParam String endIp, @RequestParam String status, @RequestParam String subnetId)
    {
        Response response = new Response();

        if(status != null && !status.isEmpty() && startIp != null && !startIp.isEmpty() && endIp != null && !endIp.isEmpty() && subnetId !=null && (status.equalsIgnoreCase("USED") || status.equalsIgnoreCase("Available") || status.equalsIgnoreCase("Reserved") || status.equalsIgnoreCase("Transient")))
        {
            try
            {
                String accessToken = request.getHeader(TraceOrgCommonConstants.ACCESSTOKEN);

                if (traceOrgCommonUtil.checkToken(accessToken))
                {
                    if(traceOrgCommonUtil.currentUserRole(accessToken).equals(TraceOrgCommonConstants.ROLE_ADMIN))
                    {
                        TraceOrgSubnetDetails traceOrgSubnetDetail = (TraceOrgSubnetDetails)this.traceOrgService.getById(TraceOrgCommonConstants.TRACE_ORG_SUBNET_DETAILS,Long.parseLong(subnetId));

                        if(traceOrgSubnetDetail != null)
                        {
                            if(this.traceOrgCommonUtil.isValidIp(traceOrgSubnetDetail,startIp) &&  this.traceOrgCommonUtil.isValidIp(traceOrgSubnetDetail,endIp))
                            {
                                if(Long.parseLong(startIp.substring(startIp.lastIndexOf(".")+ 1,startIp.length())) < Long.parseLong(endIp.substring(endIp.lastIndexOf(".")+1,endIp.length())))
                                {
                                    Set<String> rangeIpList = this.traceOrgCommonUtil.getUpdateIPRange(startIp, endIp);

                                    String ipList = this.traceOrgCommonUtil.getIpList(rangeIpList);

                                    List<TraceOrgSubnetIpDetails> traceOrgSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) this.traceOrgService.commonQuery("",TraceOrgCommonConstants.SELECTED_IP_SUBNET_ID.replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,subnetId.toString()).replace(TraceOrgCommonConstants.ID, TraceOrgCommonConstants.IP_ADDRESS).replace(TraceOrgCommonConstants.SUBNET_ID_LIST, ipList));

                                    List<Long> idList = new ArrayList<>();

                                    if(traceOrgSubnetIpDetailsList != null && !traceOrgSubnetIpDetailsList.isEmpty())
                                    {
                                        for (int index = 0; index < traceOrgSubnetIpDetailsList.size(); index++)
                                        {
                                            idList.add(traceOrgSubnetIpDetailsList.get(index).getId());
                                        }
                                    }

                                    if(!idList.isEmpty())
                                    {
                                        for(int index = 0; index < idList.size(); index++)
                                        {
                                            TraceOrgSubnetIpDetails traceOrgSubnetIpDetails = (TraceOrgSubnetIpDetails)this.traceOrgService.getById(TraceOrgCommonConstants.TRACE_ORG_SUBNET_IP_DETAILS,idList.get(index));

                                            switch(status.toUpperCase())
                                            {
                                                case "USED" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.USED);
                                                    break;
                                                case "TRANSIENT" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.TRANSIENT);
                                                    break;
                                                case "AVAILABLE" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.AVAILABLE);
                                                    break;
                                                case "RESERVED" :
                                                    traceOrgSubnetIpDetails.setStatus(TraceOrgCommonConstants.RESERVED);
                                                    break;
                                                default:
                                                    traceOrgSubnetIpDetails.setStatus(null);
                                                    break;
                                            }
                                            if(traceOrgSubnetIpDetails.getStatus() !=null)
                                            {
                                                traceOrgSubnetIpDetails.setModifiedDate(new Date());

                                                this.traceOrgService.insert(traceOrgSubnetIpDetails);
                                            }
                                        }

                                        List<TraceOrgSubnetIpDetails> totalSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.TRACE_ORG_SUBNET_IP_DETAILS +" where subnetId = '"+traceOrgSubnetDetail.getId()+"' and  deactiveStatus = false");

                                        List<TraceOrgSubnetIpDetails> availableSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.SUBNET_IP_DETAILS_BY_STATUS_AND_SUBNET_ID.replace(TraceOrgCommonConstants.STATUS_VALUE,TraceOrgCommonConstants.AVAILABLE).replace(TraceOrgCommonConstants.SUBNET_ID_VALUE, TraceOrgCommonUtil.getStringValue(traceOrgSubnetDetail.getId()))+" and deactiveStatus = false");

                                        List<TraceOrgSubnetIpDetails> usedSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.SUBNET_IP_DETAILS_BY_STATUS_AND_SUBNET_ID.replace(TraceOrgCommonConstants.STATUS_VALUE,TraceOrgCommonConstants.USED).replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,TraceOrgCommonUtil.getStringValue(traceOrgSubnetDetail.getId())) +" and deactiveStatus = false");

                                        List<TraceOrgSubnetIpDetails> transientSubnetIpDetailsList = (List<TraceOrgSubnetIpDetails>) traceOrgService.commonQuery(TraceOrgCommonConstants.SUBNET_IP_DETAILS_BY_STATUS_AND_SUBNET_ID.replace(TraceOrgCommonConstants.STATUS_VALUE,TraceOrgCommonConstants.TRANSIENT).replace(TraceOrgCommonConstants.SUBNET_ID_VALUE,TraceOrgCommonUtil.getStringValue(traceOrgSubnetDetail.getId())) +" and deactiveStatus = false");

                                        traceOrgSubnetDetail.setAvailableIp((long) availableSubnetIpDetailsList.size());

                                        traceOrgSubnetDetail.setUsedIp((long) usedSubnetIpDetailsList.size());

                                        traceOrgSubnetDetail.setTransientIp((long) transientSubnetIpDetailsList.size());

                                        traceOrgSubnetDetail.setTotalIp((long)totalSubnetIpDetailsList.size());

                                        traceOrgService.insert(traceOrgSubnetDetail);

                                        response.setSuccess(TraceOrgCommonConstants.TRUE);

                                        response.setMessage(TraceOrgMessageConstants.SUBNET_IP_UPDATE_SUCCESS);
                                    }
                                    else
                                    {
                                        response.setSuccess(TraceOrgCommonConstants.FALSE);

                                        response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                                    }
                                }
                                else
                                {
                                    response.setSuccess(TraceOrgCommonConstants.FALSE);

                                    response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                                }

                            }
                            else
                            {
                                response.setSuccess(TraceOrgCommonConstants.FALSE);

                                response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                            }

                        }
                        else
                        {
                            response.setSuccess(TraceOrgCommonConstants.FALSE);

                            response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
                        }
                    }
                    else
                    {
                        response.setSuccess(TraceOrgCommonConstants.FALSE);

                        response.setMessage(TraceOrgMessageConstants.DO_NOT_HAVE_ACCESS);
                    }
                }
                else
                {
                    response.setSuccess(TraceOrgCommonConstants.FALSE);

                    response.setMessage(TraceOrgMessageConstants.TOKEN_NOT_RECOGNISED);
                }
            }
            catch (Exception exception)
            {
                _logger.error(exception);

                response.setSuccess(TraceOrgCommonConstants.FALSE);

                response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
            }
        }
        else
        {
            response.setSuccess(TraceOrgCommonConstants.FALSE);

            response.setMessage(TraceOrgMessageConstants.ENTER_VALID_DETAILS);
        }
        return new ResponseEntity<>(response, HttpStatus.OK);
    }

    public String getIpList(Set<String> ipSet)
    {
        String ipList = null;

        try
        {
            if (!ipSet.isEmpty())
            {
                ipList = "'" + StringUtils.join(ipSet, "','") + "'";
            }
        }
        catch (Exception exception)
        {
            _logger.error(exception);
        }

        return ipList;
    }

    public Set<String> getUpdateIPRange(String startIp, String endIp)
    {
        Set<String> rangeIpList = null;

        try
        {
            long ipStart = ipToLong(startIp);

            long ipEnd = ipToLong(endIp);

            if ((ipEnd - ipStart) > 255)
            {
                _logger.warn("Selected Update Ip Out of Range!");
            }

            else
            {
                rangeIpList = new LinkedHashSet<>((int) (ipEnd - ipStart));

                for (long index = ipStart; index <= ipEnd; index++)
                {
                    rangeIpList.add(longToIp(index));
                }
            }
        }
        catch (Exception exception)
        {
            _logger.error(exception);
        }

        return rangeIpList;
    }

    private static String longToIp(long convertedLongIp)
    {
        StringBuilder stringBuilder = new StringBuilder(15);

        try
        {
            for (int index = 0; index < 4; index++)
            {
                stringBuilder.insert(0, convertedLongIp & 0xff);

                if (index < 3)
                {
                    stringBuilder.insert(0, '.');
                }

                convertedLongIp = convertedLongIp >> 8;
            }
        }
        catch (Exception exception)
        {
            _logger.error(exception);
        }

        return stringBuilder.toString();
    }

    public static long ipToLong(String ipAddress) throws Exception
    {
        long ipToLong = 0L;

        try
        {
            String[] ipOctet = ipAddress.split("\\.");

            for (int i = 3; i >= 0; i--)
            {
                ipToLong += (Long.parseLong(ipOctet[3 - i]) << (i * 8));
            }
        }
        catch (Exception exception)
        {
            _logger.error(exception);
        }

        return ipToLong;
    }

    


    @Test
    public void givenStartIpEndIpStatusAndSubnetIdWhenNotNullReceivedThenSuccessResponseReceivedForUpdateSubnetIpRange() throws Exception
    {
        String startIp = "10.20.40.1";

        String endIp = "10.20.40.10";

        String status = "USED";

        String subnetId = "27";

        RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/updateSubnetIpRange/").param("startIp", startIp).param("endIp", endIp).param("status", status).param("subnetId", subnetId).header(TraceOrgCommonConstants.ACCESSTOKEN, accessTokenValue);

        mvcResult = mockMvc.perform(requestBuilder).andExpect(status().isOk()).andReturn();

        boolean parameterStatus = mvcResult.getResponse().getContentAsString().contains(TraceOrgCommonConstants.STRING_FALSE);

        boolean parameterMessage = mvcResult.getResponse().getContentAsString().contains(TraceOrgMessageConstants.ENTER_VALID_DETAILS);

        Assert.assertTrue(parameterStatus);

        Assert.assertFalse(parameterMessage);
    }

    @Test
    public void givenStartIpEndIpStatusAndSubnetIdWhenNullReceivedThenFailureResponseReceivedForUpdateSubnetIpRange() throws Exception
    {
        String startIp = "";

        String endIp = "";

        String status = "USED";

        String subnetId = "27";

        RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/updateSubnetIpRange/").param("startIp", startIp).param("endIp", endIp).param("status", status).param("subnetId", subnetId).header(TraceOrgCommonConstants.ACCESSTOKEN, accessTokenValue);

        mvcResult = mockMvc.perform(requestBuilder).andExpect(status().isOk()).andReturn();

        boolean parameterStatus = mvcResult.getResponse().getContentAsString().contains(TraceOrgCommonConstants.STRING_FALSE);

        boolean parameterMessage = mvcResult.getResponse().getContentAsString().contains(TraceOrgMessageConstants.ENTER_VALID_DETAILS);

        Assert.assertTrue(parameterStatus);

        Assert.assertTrue(parameterMessage);
    }

    @Test
    public void givenStartIpEndIpStatusAndSubnetIdWhenInvalidTokenReceivedThenFailureResponseReceivedForUpdateSubnetIpRange() throws Exception
    {
        String startIp = "10.20.40.1";

        String endIp = "10.20.40.10";

        String status = "USED";

        String subnetId = "27";

        RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/updateSubnetIpRange/").param("startIp", startIp).param("endIp", endIp).param("status", status).param("subnetId", subnetId).header(TraceOrgCommonConstants.ACCESSTOKEN, accessTokenValue);

        Mockito.when(traceOrgCommonUtil.checkToken(accessTokenValue)).thenReturn(TraceOrgCommonConstants.FALSE);

        mvcResult = mockMvc.perform(requestBuilder).andExpect(status().isOk()).andReturn();

        boolean invalidTokenStatus = mvcResult.getResponse().getContentAsString().contains(TraceOrgCommonConstants.STRING_FALSE);

        boolean invalidTokenMessage = mvcResult.getResponse().getContentAsString().contains(TraceOrgMessageConstants.TOKEN_NOT_RECOGNISED);

        Assert.assertTrue(invalidTokenStatus);

        Assert.assertTrue(invalidTokenMessage);
    }

    @Test
    public void givenStartIpEndIpStatusAndSubnetIdWhenValidTokenReceivedThenSuccessResponseReceivedForUpdateSubnetIpRange() throws Exception
    {
        String startIp = "10.20.40.1";

        String endIp = "10.20.40.10";

        String status = "USED";

        String subnetId = "27";

        RequestBuilder requestBuilder = MockMvcRequestBuilders.post("/updateSubnetIpRange/").param("startIp", startIp).param("endIp", endIp).param("status", status).param("subnetId", subnetId).header(TraceOrgCommonConstants.ACCESSTOKEN, accessTokenValue);

        Mockito.when(traceOrgCommonUtil.checkToken(accessTokenValue)).thenReturn(TraceOrgCommonConstants.TRUE);

        mvcResult = mockMvc.perform(requestBuilder).andExpect(status().isOk()).andReturn();

        boolean validTokenStatus = mvcResult.getResponse().getContentAsString().contains(TraceOrgCommonConstants.STRING_FALSE);

        boolean invalidTokenMessage = mvcResult.getResponse().getContentAsString().contains(TraceOrgMessageConstants.ENTER_VALID_DETAILS);

        Assert.assertTrue(validTokenStatus);

        Assert.assertTrue(invalidTokenMessage);
    }

Hello,
Before *IPAM-124* While Updating the status in "Select IP Range" other ranges are gets affected.

There is an issue in manage Subnet IP id in database...
1. while adding Subnet of 24 CIDR it's working properly. 
2. while adding Subnet of 16 CIDR it's not working properly.
 
Now, added code for *IPAM-124*
1. Insert only one Subnet IP Batch > *66000* (Instead of multiple Batch of *20000*)

*Git Details*
IPAM - 

war file : [smb://172.16.10.10/mindarray-builds/IPAM/IPAM-126]

