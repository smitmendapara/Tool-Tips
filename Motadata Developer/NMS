-> one ui & maven project

-> In the ui project I created one jsp file and also web.xml and struts-congif.xml file for mapping with jetty or tomcat configuration.

-> requirements for maven project : jdk, h2 dependency, h2 jar, jetty dependency, jetty jar-download
 
-> In the maven project I created kernel and logger file. 

-> Logger file for handle problems through the log file. 

-> start h2 database -> verify h2 database -> start jetty server -> load h2 database configuration -> start nsq server -> init nsq consumer

-> start scheduler and polling

-> for start from scratch for ui project maven project with archtype.webapp -> make src/main/java (source root) and /resources (resources root)

-> Apache Tomcat Server → [https://tomcat.apache.org/download-90.cgi](https://tomcat.apache.org/download-90.cgi) 

-> Apache SubnetUtils → [https://jar-download.com/artifacts/commons-net/commons-net](https://jar-download.com/artifacts/commons-net/commons-net)

-> Struts → [http://www.java2s.com/Code/Jar/s/Downloadstrutscore135jar.htm](http://www.java2s.com/Code/Jar/s/Downloadstrutscore135jar.htm)

-> NSQ → [https://nsq.io/deployment/installing.html](https://nsq.io/deployment/installing.html) 

-> Jetty Server → [https://www.eclipse.org/jetty/download.php](https://www.eclipse.org/jetty/download.php)

-> move struts.xml file in resources and all action java file in java folder

-> web.xml file in wen-inf folder

-> all jsp file in webapp folder

-> pom.xml dependencies -> struts2-json-plugin, struts2-core, javax.servlet-api, h2 (for database), commons-io (IOUtils)

-> jar file -> h2, google-http-client

-> IOUtils provide utility methods for reading, writing and copying files. The methods work with InputStream, OutputStream, Reader and Writer. 

-> 172.16.8.182
-> user - root
-> pass - motadata

------------------------------------------------ sql queries --------------------------------------------

-> CREATE TABLE TB_MONITOR(ip varchar(20), response varchar(20), username varchar(20), password varchar(20), device varchar(20));
-> create table TB_DISCOVER(Id int, Name varchar(20), IP varchar(20), Username varchar(20), Password varchar(20), Device varchar(10), Response varchar(300), Status varchar(10));
-> create table TB_MONITOR(Id int NOT NULL UNIQUE, IP varchar(20), Profile varchar(20), DeviceType varchar(20))

-> insert into TB_DISCOVER(Name, IP, Username, Password, Device) values('Test', '127.0.0.1', 'null', 'null', 'Ping'); // for auto increment
-> ALTER TABLE TB_DISCOVER MODIFY COLUMN Id INT auto_increment


---------------- for ssh class -----------------

public String executeFileReadCommand(String filePath)
    {
        ChannelSftp channel = null;

        InputStream inputStream = null;

        StringBuilder output = new StringBuilder();

        try
        {
            if (session != null)
            {
                channel = (ChannelSftp) session.openChannel("sftp");

                channel.connect();

                _logger.debug(hostIp + " - checking channel connection...");

                if (channel.isConnected())
                {
                    inputStream = channel.get(filePath);

                    _logger.debug(hostIp + " - channel is currently connected...");

                    output.append(IOUtils.toString(inputStream));

                    output.append(NEW_LINE);

                    _logger.debug(hostIp + " - command output -> " + output.toString());
                }
                else
                {
                    _logger.warn(hostIp + " - channel is not connected!");
                }
            }
            else
            {
                _logger.warn(hostIp + " - session is expired!");
            }

            if (inputStream != null)
            {
                inputStream.close();

                _logger.debug(hostIp + " - channel is closed for communication!");
            }

            if (channel != null && !channel.isClosed())
            {
                channel.disconnect();

                _logger.debug(hostIp + " - channel is disconnected!");
            }
        }
        catch (Exception exception)
        {
            _logger.error("file not read with sftp!", exception);
        }

        return output.toString();
    }

public List<String> retrieveFileNames(String filePrefix, String fileName)
    {
        ChannelSftp channelSftp = null;

        List<String> fileNames = new ArrayList<>();

        try
        {
            channelSftp = (ChannelSftp) session.openChannel("sftp");

            _logger.debug("Connecting to sftp channel : " + hostIp);

            channelSftp.connect();

            _logger.debug(hostIp + ":checking channel connection");

            if (channelSftp.isConnected())
            {
                _logger.debug("Channel connected : " + hostIp);

                ChannelSftp.LsEntrySelector selector = entry -> {

                    if ((!Strings.isNullOrEmpty(filePrefix) && entry.getFilename().startsWith(filePrefix)) || (!Strings.isNullOrEmpty(fileName) && entry.getFilename().equals(fileName))) {

                        fileNames.add(entry.getFilename());
                    }
                    return ChannelSftp.LsEntrySelector.CONTINUE;
                };

                channelSftp.ls(channelSftp.getHome(), selector);
            }
            else
            {
                _logger.warn(hostIp + ":channel is not connected");
            }
        }
        catch (Exception exception)
        {
            _logger.debug("connection login over sftp..."+ hostIp +" failed");

            _logger.error("", exception);
        }
        finally
        {
            if (channelSftp != null && !channelSftp.isClosed())
            {
                channelSftp.disconnect();

                _logger.debug("Channel is disconnected");
            }

            _logger.debug("Server Session disconnected over sftp..."+ hostIp);
        }

        return fileNames;
    }

public void deleteFile(List<String> filesToDelete)
    {
        ChannelSftp channelSftp = null;

        try
        {
            channelSftp = (ChannelSftp) session.openChannel("sftp");

            _logger.debug("Connecting to sftp channel : " + hostIp);

            channelSftp.connect();

            _logger.debug(hostIp + ":checking channel connection");

            if (channelSftp.isConnected())
            {
                _logger.debug("Channel connected : " + hostIp);

                for (String fileToDelete : filesToDelete)
                {
                    _logger.info("deleting file from sftp : " + fileToDelete);

                    _logger.debug("deleting file from sftp : " + fileToDelete);

                    channelSftp.rm(fileToDelete);
                }
            }
            else
            {
                _logger.warn(hostIp + ":channel is not connected");
            }

        }
        catch (Exception exception)
        {
            _logger.debug("connection login over sftp..."+ hostIp +" failed");

            _logger.error("", exception);
        }
        finally {

            if (channelSftp != null && !channelSftp.isClosed())
            {
                channelSftp.disconnect();

                _logger.debug("Sftp Channel is disconnected");
            }

            _logger.debug("Server Session disconnected over sftp..."+ hostIp);

        }
    }

public boolean sendFileOverSFTP(File fileToSend)
    {
        ChannelSftp channelSftp = null;

        boolean isFileUploadSuccessful=false;

        String sftpServerIp = hostIp;

        try
        {
            channelSftp = (ChannelSftp) session.openChannel("sftp");

            channelSftp.connect();

            _logger.debug(hostIp + ":checking channel connection");

            if (channelSftp.isConnected())
            {
                InputStream inputStream = new FileInputStream(fileToSend);

                channelSftp.put(inputStream, fileToSend.getName());

                _logger.debug("File stored : " + fileToSend);

                isFileUploadSuccessful = true;

            }
            else
            {
                _logger.warn(hostIp + ":channel is not connected");
            }
        }
        catch (Exception exception)
        {
            _logger.debug("connection login over sftp..."+sftpServerIp+" failed");

            _logger.error("", exception);
        }
        finally
        {

            if (channelSftp != null && !channelSftp.isClosed())
            {
                channelSftp.disconnect();

                _logger.debug("Channel is disconnected");
            }

            disconnect();

            _logger.debug("Server Session disconnected over sftp..."+sftpServerIp);

        }
        return isFileUploadSuccessful;
    }

public boolean sendFilesOverSFTP(List<String> filesToSend,String remoteFilePath)
    {
        ChannelSftp channelSftp = null;

        boolean isFileUploadSuccessful = false;

        String sftpServerIp = hostIp;

        InputStream inputStream = null;

        try
        {
            channelSftp = (ChannelSftp) session.openChannel("sftp");

            channelSftp.connect();

            _logger.debug(hostIp + ":checking channel connection");

            if (channelSftp.isConnected())
            {
                for (String filePath : filesToSend)
                {
                    File file = new File(filePath);

                    inputStream = new FileInputStream(file);

                    channelSftp.put(inputStream, remoteFilePath+file.getName());

                    _logger.debug("File stored : " + remoteFilePath+file.getName());
                }

                isFileUploadSuccessful = true;

                inputStream.close();
            }
            else
            {
                _logger.warn(hostIp + ":channel is not connected");
            }
        }
        catch (Exception exception)
        {
            _logger.debug("connection login over sftp..." + sftpServerIp + " failed");

            _logger.error("", exception);
        }
        finally
        {
            if(channelSftp != null && !channelSftp.isClosed())
            {
                channelSftp.disconnect();

                _logger.debug("Channel is disconnected");
            }

            disconnect();

            _logger.debug("Server Session disconnected over sftp..." + sftpServerIp);
        }
        return isFileUploadSuccessful;
    }
